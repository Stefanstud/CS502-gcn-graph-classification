Hi, 

I wanted to ask about Part 3, incorporating edge features. So, i completed Part 2, and got these results as the baseline: 
[Epoch 20/20, Train F1: 0.83, Train Accuracy: 0.76, Val F1: 0.80, Val Accuracy: 0.71]


This was done using a model with 1 GraphConv layer.

Over the past two days i have been trying different ways of incorporating the edge features:

I tried concatenation followed by a transformation. Concatenate the edge features with node features and then apply a neural network to transform the concatenated features. 

I tried replacing the 1s in the adjacency matrix with the edge feature vectors, transforming them into scalar weights(learnable).

I tried representing the edge features in the same dimensions as the node features (using a neural network) and then adding them together.

I tried aggregating the node's edges and concatenated them to the node feature vector (tried this with sum, max, and mean aggregation)

+ a bunch of simpler methods 

The best i managed to get using the exact same setup (1 GraphConv layer) was:
[Epoch 20/20, Train F1: 0.87, Train Accuracy: 0.82, Val F1: 0.86, Val Accuracy: 0.78]
